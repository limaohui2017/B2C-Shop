import type { ExtractPropTypes } from 'vue';
export declare type AlertEffect = 'light' | 'dark';
export declare const ALERT_TYPE_CLASSES_MAP: {
    readonly success: "el-icon-success";
    readonly warning: "el-icon-warning";
    readonly error: "el-icon-error";
    readonly info: "el-icon-info";
};
export declare const alertProps: {
    readonly title: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly description: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly type: {
        readonly type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        readonly required: boolean;
        readonly default: "error" | "success" | "warning" | "info";
        readonly validator: (val: unknown) => boolean;
    };
    readonly closable: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly closeText: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly showIcon: BooleanConstructor;
    readonly center: BooleanConstructor;
    readonly effect: {
        readonly type: import("vue").PropType<"light" | "dark">;
        readonly required: boolean;
        readonly default: "light" | "dark";
        readonly validator: (val: unknown) => boolean;
    };
};
export declare type AlertProps = ExtractPropTypes<typeof alertProps>;
export declare const alertEmits: {
    close: (evt: MouseEvent) => boolean;
};
export declare type AlertEmits = typeof alertEmits;
