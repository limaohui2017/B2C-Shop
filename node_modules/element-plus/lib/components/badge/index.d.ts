export declare const ElBadge: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly value: {
        readonly type: import("vue").PropType<string | number>;
        readonly required: boolean;
        readonly default: string | number;
        readonly validator: (val: unknown) => boolean;
    };
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: 99;
    };
    readonly isDot: BooleanConstructor;
    readonly hidden: BooleanConstructor;
    readonly type: {
        readonly type: import("vue").PropType<"success" | "warning" | "info" | "primary" | "danger">;
        readonly required: boolean;
        readonly default: "danger";
        readonly validator: (val: unknown) => boolean;
    };
}, {
    content: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly value?: unknown;
    readonly max?: unknown;
    readonly isDot?: unknown;
    readonly hidden?: unknown;
    readonly type?: unknown;
} & {
    type: "success" | "warning" | "info" | "primary" | "danger";
    value: string | number;
    hidden: boolean;
    max: number;
    isDot: boolean;
} & {}> & {}, {
    type: "success" | "warning" | "info" | "primary" | "danger";
    value: string | number;
    hidden: boolean;
    max: number;
    isDot: boolean;
}>> & Record<string, any>;
export default ElBadge;
export * from './src/badge';
